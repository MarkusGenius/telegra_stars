from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio

API_TOKEN = "8309652807:AAGm9d0lWcUcqonxFOgXruXpHDxE2ClUwfI"
ADMIN_ID = 8127196287  # —Ç–≤–æ–π Telegram ID
SBP_PHONE = "+7 999 123 45 67"  # –Ω–æ–º–µ—Ä –¥–ª—è –°–ë–ü

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

class OrderForm(StatesGroup):
    waiting_for_stars = State()
    waiting_for_username = State()
    waiting_for_receipt = State()

@dp.message_handler(commands="start")
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã ‚≠ê\n\n"
        "–ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ —Ö–æ—á–µ—à—å (–º–∏–Ω–∏–º—É–º 50):"
    )
    await OrderForm.waiting_for_stars.set()

@dp.message_handler(state=OrderForm.waiting_for_stars)
async def process_stars(message: types.Message, state: FSMContext):
    try:
        stars = int(message.text)
        if stars < 50:
            await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º 50 –∑–≤—ë–∑–¥! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ‚ú®")
            return
        await state.update_data(stars=stars)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! ‚≠ê –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π <b>@username</b> üë§")
        await OrderForm.waiting_for_username.set()
    except:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

@dp.message_handler(state=OrderForm.waiting_for_username)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text
    data = await state.get_data()
    stars = data["stars"]

    await state.update_data(username=username)

    await message.answer(
        f"‚ú® –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Ç–≤–æ–π –∑–∞–∫–∞–∑:\n\n"
        f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: <b>{stars}</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{username}</b>\n\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü:\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{SBP_PHONE}</b>\n"
        f"üè¶ –ë–∞–Ω–∫: –ª—é–±–æ–π\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–≥—Ä—É–∑–∏ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω/—á–µ–∫ üì∏"
    )
    await OrderForm.waiting_for_receipt.set()

@dp.message_handler(content_types=["photo"], state=OrderForm.waiting_for_receipt)
async def process_receipt(message: types.Message, state: FSMContext):
    data = await state.get_data()
    stars = data["stars"]
    username = data["username"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–∫—Ä–∏–Ω –∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    photo_id = message.photo[-1].file_id
    await bot.send_photo(
        ADMIN_ID,
        photo=photo_id,
        caption=f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stars}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n\n"
                "üì∏ –ß–µ–∫ –≤—ã—à–µ"
    )

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ó–≤—ë–∑–¥—ã –ø—Ä–∏—à–ª–∏", callback_data="stars_ok"),
        InlineKeyboardButton("‚ùå –ó–≤—ë–∑–¥—ã –Ω–µ –ø—Ä–∏—à–ª–∏", callback_data="stars_fail")
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! üîé –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É. –ñ–¥–∏ —Å–≤–æ–∏ –∑–≤—ë–∑–¥—ã ‚ú®", reply_markup=keyboard)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data in ["stars_ok", "stars_fail"])
async def process_callback(callback: types.CallbackQuery):
    if callback.data == "stars_ok":
        await callback.message.edit_text("üéâ –û—Ç–ª–∏—á–Ω–æ! –ó–≤—ë–∑–¥—ã —É–∂–µ —É —Ç–µ–±—è ‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É üíú")
    else:
        await callback.message.edit_text("üòî –ü–æ–Ω—è–ª —Ç–µ–±—è. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ üõ†")
